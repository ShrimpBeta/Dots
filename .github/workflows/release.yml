name: build and release

on:
  push:
    tags:
      - '*'

env:
  macosx64file: Dots-version-macos-x64.zip
  macosarm64file: Dots-version-macos-arm64.zip
  windowsx86file: Dots-version-windows-x86.zip
  windowsx64file: Dots-version-windows-x64.zip
  windowsarm64file: Dots-version-windows-arm64.zip

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.1
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v3.2.0
      with:
        dotnet-version: '8.0.x'
    - name: restore workloads
      run: |
        cd $GITHUB_WORKSPACE/src
        dotnet workload restore
    - name: run housekeeping scripts
      run: |
        cd $GITHUB_WORKSPACE/scripts
        bash housekeeping.sh
    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    
    - name: run build scripts
      run: |
        cd $GITHUB_WORKSPACE/scripts
        bash build-macos.sh
        echo "macosx64file=${{ env.macosx64file }}" >> "$GITHUB_ENV"
        echo "macosarm64file=${{ env.macosarm64file }}" >> "$GITHUB_ENV"
    - uses: actions/upload-artifact@v3.1.3
      with:
        name: ${{ env.macosx64file }}
        path: ${{ github.workspace }}/src/bin/Release/net8.0-macos/osx-x64/publish/${{ env.macosx64file }}
    - uses: actions/upload-artifact@v3.1.3
      with:
        name: ${{ env.macosarm64file }}
        path: ${{ github.workspace }}/src/bin/Release/net8.0-macos/osx-arm64/publish/${{ env.macosarm64file }}

  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.1
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v3.2.0
      with:
        dotnet-version: '8.0.x'
    - name: restore workloads
      run: |
        cd D:/a/Dots/Dots/src
        dotnet workload restore
    - name: run housekeeping scripts
      run: |
        cd D:/a/Dots/Dots/scripts
        bash housekeeping.sh
    - name: run build scripts
      run: |
        cd D:/a/Dots/Dots/scripts
        bash build-windows.sh
        echo "windowsx86file=${{ env.windowsx86file }}" >> "$GITHUB_ENV"
        echo "windowsx64file=${{ env.windowsx64file }}" >> "$GITHUB_ENV"
        echo "windowsarm64file=${{ env.windowsarm64file }}" >> "$GITHUB_ENV"
    - uses: actions/upload-artifact@v3.1.3
      with:
        name: ${{ env.windowsx86file }}
        path: D:/a/Dots/Dots/src/bin/Release/net8.0/win-x86/publish/${{ env.windowsx86file }}
    - uses: actions/upload-artifact@v3.1.3
      with:
        name: ${{ env.windowsx64file }}
        path: D:/a/Dots/Dots/src/bin/Release/net8.0/win-x64/publish/${{ env.windowsx64file }}
    - uses: actions/upload-artifact@v3.1.3
      with:
        name: ${{ env.windowsarm64file }}
        path: D:/a/Dots/Dots/src/bin/Release/net8.0/win-arm64/publish/${{ env.windowsarm64file }}

  create-release:
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3.0.2
        with:
          name: ${{ env.macosx64file }}
          path: $GITHUB_WORKSPACE
      - uses: actions/download-artifact@v3.0.2
        with:
          name: ${{ env.macosarm64file }}
          path: $GITHUB_WORKSPACE
      - uses: actions/download-artifact@v3.0.2
        with:
          name: ${{ env.windowsx86file }}
          path: $GITHUB_WORKSPACE
      - uses: actions/download-artifact@v3.0.2
        with:
          name: ${{ env.windowsx64file }}
          path: $GITHUB_WORKSPACE
      - uses: actions/download-artifact@v3.0.2
        with:
          name: ${{ env.windowsarm64file }}
          path: $GITHUB_WORKSPACE

      - name: Display structure of downloaded files
        run: |
          cd $GITHUB_WORKSPACE
          ls

      - name: Create Release
        uses: ncipollo/release-action@v1.13.0
        with:
            artifacts: |
              $GITHUB_WORKSPACE/${{ env.macosx64file }}
              $GITHUB_WORKSPACE/${{ env.macosarm64file }}
              $GITHUB_WORKSPACE/${{ env.windowsx86file }}
              $GITHUB_WORKSPACE/${{ env.windowsx64file }}
              $GITHUB_WORKSPACE/${{ env.windowsarm64file }}
            token: ${{ secrets.GITHUB_TOKEN }}
            generateReleaseNotes: true
            draft: true
