name: build and release

on:
  push:
    tags:
      - '*'

jobs:
  build-macos:
    runs-on: macos-13
    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.1
    - name: Log GITHUB_WORKSPACE
      run: |
        echo "GITHUB_WORKSPACE is $GITHUB_WORKSPACE"
        echo "current directory"
        ls
        echo "GITHUB_WORKSPACE directory"
        ls $GITHUB_WORKSPACE
        echo "src directory"
        ls $GITHUB_WORKSPACE/src

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v3.2.0
      with:
        dotnet-version: '8.0.x'
    - name: restore workloads
      run: |
        cd $GITHUB_WORKSPACE/src
        dotnet workload restore
    - name: run housekeeping scripts
      run: |
        cd $GITHUB_WORKSPACE/scripts
        bash housekeeping.sh
    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    
    - name: run build scripts
      run: |
        cd $GITHUB_WORKSPACE/scripts
        bash build-macos.sh
    - uses: actions/upload-artifact@v3.1.3
      with:
        name: ${{ env.macosx64file }}}
        path: ${{ github.workspace }}/src/bin/Release/net8.0-macos/osx-x64/publish/*.zip
    - uses: actions/upload-artifact@v3.1.3
      with:
        name: ${{ env.macosarm64file }}}
        path: ${{ github.workspace }}/src/bin/Release/net8.0-macos/osx-arm64/publish/*.zip

  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.1
    - name: Log GITHUB_WORKSPACE
      run: |
        echo "GITHUB_WORKSPACE is $GITHUB_WORKSPACE"
        echo "current directory"
        ls
        echo "GITHUB_WORKSPACE directory"
        ls $GITHUB_WORKSPACE
        echo "src directory"
        ls $GITHUB_WORKSPACE/src
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v3.2.0
      with:
        dotnet-version: '8.0.x'
    - name: restore workloads
      run: |
        cd D:/a/Dots/Dots/src
        dotnet workload restore
    - name: run housekeeping scripts
      shell: bash
      run: |
        cd D:/a/Dots/Dots/
        version=$(cat version.txt)
        echo "Version is now $version" 
        cd D:/a/Dots/Dots/src
        sed -i '' "s/CFBundleVersion>.*</CFBundleVersion>$version</" Dots.csproj
        sed -i '' "s/CFBundleShortVersionString>.*</CFBundleShortVersionString>$version</" Dots.csproj
        sed -i '' "s/Version>.*</Version>$version</" Dots.csproj
        
        echo "Version is now $version"
        echo "Setting up file names"
        
        macosx64file=$(echo Dots-$version-macos-x64.zip)
        macosarm64file=$(echo Dots-$version-macos-arm64.zip)
        windowsx86file=$(echo Dots-$version-win-x86.zip)
        windowsx64file=$(echo Dots-$version-win-x64.zip)
        windowsarm64file=$(echo Dots-$version-win-arm64.zip)
        
        echo "filenames: $macosx64file $macosarm64file $windowsx86file $windowsx64file $windowsarm64file"
    - name: run build scripts
      run: |
        cd D:/a/Dots/Dots/scripts
        bash build-windows.sh
        echo "windowsarm64file=$windowsarm64file" >> $GITHUB_ENV
        echo "windowsx64file=$windowsx64file" >> $GITHUB_ENV
        echo "windowsx86file=$windowsx86file" >> $GITHUB_ENV
    - uses: actions/upload-artifact@v3.1.3
      with:
        name: ${{ env.windowsx86file }}}
        path: D:/a/Dots/Dots/src/bin/Release/net8.0/win-x86/publish/*.zip
    - uses: actions/upload-artifact@v3.1.3
      with:
        name: ${{ env.windowsx64file }}}
        path: D:/a/Dots/Dots/src/bin/Release/net8.0/win-x64/publish/*.zip
    - uses: actions/upload-artifact@v3.1.3
      with:
        name: ${{ env.windowsarm64file }}}
        path: D:/a/Dots/Dots/src/bin/Release/net8.0/win-arm64/publish/*.zip

  create-release:
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
      - name: Log GITHUB_WORKSPACE
        run: |
          echo "GITHUB_WORKSPACE is $GITHUB_WORKSPACE"
          echo "current directory"
          ls
          echo "GITHUB_WORKSPACE directory"
          ls $GITHUB_WORKSPACE
          echo "src directory"
          ls $GITHUB_WORKSPACE/src
      - name: run housekeeping scripts
        run: |
          cd $GITHUB_WORKSPACE/scripts
          bash housekeeping.sh
      - uses: actions/download-artifact@v3.0.2
        with:
          name: ${{ env.macosx64file }}}
          path: $GITHUB_WORKSPACE
      - uses: actions/download-artifact@v3.0.2
        with:
          name: ${{ env.macosarm64file }}}
          path: $GITHUB_WORKSPACE
      - uses: actions/download-artifact@v3.0.2
        with:
          name: ${{ env.windowsx86file }}}
          path: $GITHUB_WORKSPACE
      - uses: actions/download-artifact@v3.0.2
        with:
          name: ${{ env.windowsx64file }}}
          path: $GITHUB_WORKSPACE
      - uses: actions/download-artifact@v3.0.2
        with:
          name: ${{ env.windowsarm64file }}}
          path: $GITHUB_WORKSPACE

      - name: Display structure of downloaded files
        run: |
          cd $GITHUB_WORKSPACE
          ls

      - name: Create Release
        uses: ncipollo/release-action@v1.13.0
        with:
            artifacts: |
              $GITHUB_WORKSPACE/*.zip
            token: ${{ secrets.GITHUB_TOKEN }}
            generateReleaseNotes: true
            draft: true
